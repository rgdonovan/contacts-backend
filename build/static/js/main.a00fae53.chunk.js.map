{"version":3,"sources":["ContactForm.js","Contact.js","ContactFilter.js","Notification.js","Services.js","App.js","index.js"],"names":["ContactForm","addContact","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","type","value","onChange","Contact","id","name","number","handleDelete","onClick","ContactFilter","handleFilter","Notification","message","className","baseUrl","axios","get","then","res","data","catch","err","console","log","newContact","post","put","delete","App","defaultName","defaultNumber","useState","contacts","setContacts","filterBy","setFilterBy","setNewName","setNewNumber","errorMessage","setErrorMessage","handleInputChange","setter","e","target","resetInputs","closest","contactService","setErrorTimeout","setTimeout","useEffect","initalContacts","contactsToShow","filter","c","toLowerCase","includes","input","trim","preventDefault","existingContact","find","window","confirm","_","Math","round","random","returnedContact","concat","map","ReactDOM","render","document","getElementById"],"mappings":"kLAUeA,MAVf,YAAgG,IAAzEC,EAAwE,EAAxEA,WAAYC,EAA4D,EAA5DA,QAASC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,iBAAkBC,EAAsB,EAAtBA,mBACvE,OACE,uBAAMC,SAAUL,EAAhB,UACE,uBAAOM,KAAK,OAAOC,MAAON,EAASO,SAAUL,IAC7C,uBAAOG,KAAK,OAAOC,MAAOL,EAAWM,SAAUJ,IAC/C,wBAAQE,KAAK,SAAb,6BCKSG,MAVf,YAAoD,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,aAClC,OACE,sBAAKH,GAAIA,EAAT,UACE,6BAAKC,IACL,4BAAIC,IACJ,wBAAQN,KAAK,SAASQ,QAASD,EAA/B,wBCISE,MATf,YAAwC,IAAhBC,EAAe,EAAfA,aACtB,OACE,gCACE,iDACA,uBAAOV,KAAK,OAAOE,SAAUQ,QCMpBC,MAVf,YAAkC,IAAXC,EAAU,EAAVA,QACrB,OAAKA,EAGH,qBAAKC,UAAU,QAAf,SACGD,IAJgB,M,gBCAjBE,EAAU,gBAwBD,EAtBA,WACb,OAAOC,IAAMC,IAAIF,GACJG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAmBzB,EAhBA,SAACG,GACd,OAAOT,IAAMU,KAAKX,EAASU,GACdP,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAchB,EAXA,SAACf,EAAIoB,GAClB,OAAOT,IAAMW,IAAN,UAAaZ,EAAb,YAAwBV,GAAMoB,GACxBP,MAAK,SAAAC,GACJ,OAAOA,EAAIC,SAQZ,EALF,SAACf,GACZ,OAAOW,IAAMY,OAAN,UAAgBb,EAAhB,YAA2BV,IACrBa,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SC+EhBS,MA9Ff,WACE,IAAMC,EAAc,eACdC,EAAgB,iBAEtB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,mBAASF,GAAvC,mBAAOlC,EAAP,KAAgByC,EAAhB,KACA,EAAkCL,mBAASD,GAA3C,mBAAOlC,EAAP,KAAkByC,EAAlB,KACA,EAAwCN,mBAAS,IAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEMC,EAAoB,SAACC,GAAD,OAAY,SAACC,GAAD,OAAOD,EAAOC,EAAEC,OAAO1C,SAEvD2C,EAAc,WAClBR,EAAWP,GACXQ,EAAaP,IA2CTvB,EAAe,SAACmC,GACpB,IAAItC,EAAKsC,EAAEC,OAAOE,QAAQ,OAAOzC,GACjC0C,EAAoB1C,GACLgB,OAAM,SAAAC,GAAG,OAAI0B,EAAgB,+CAGxCA,EAAkB,SAACnC,GACvB2B,EAAgB3B,GAChBoC,YAAW,kBAAMT,EAAgB,QAAO,OAG1CU,qBAAU,WACRH,IAEG7B,MAAK,SAAAiC,GAAc,OAAIjB,EAAYiB,MACnC9B,OAAM,SAAAC,GAAG,OAAI0B,EAAgB,gDAC/B,IAEH,IAAMI,EAAiBnB,EAASoB,QAAO,SAAAC,GAAC,OAAIA,EAAEhD,KAAKiD,cAAcC,SAASrB,IAAamB,EAAE/C,OAAOiD,SAASrB,MAEzG,OACE,gCACE,cAAC,EAAD,CAActB,QAAS0B,IACvB,+CACA,cAAC,EAAD,CAAe5B,aA7BE,SAACgC,GACpB,IAAIc,EAAQd,EAAEC,OAAO1C,MACrBkC,EAAYqB,EAAMC,OAAOH,kBA4BvB,oDACA,cAAC,EAAD,CAAa3D,QAASA,EACpBC,UAAWA,EACXF,WApEa,SAACgD,GAGlB,GAFAA,EAAEgB,iBAEE/D,IAAYkC,GAAejC,IAAckC,EAA7C,CAKA,IAAI6B,EAAkB3B,EAAS4B,MAAK,SAAAP,GAAC,OAAIA,EAAEhD,OAASV,GAAW0D,EAAE/C,SAAWV,KAE5E,GAAI+D,EAAJ,CACgBE,OAAOC,QAAP,kFAEZhB,EAAsBa,EAAgBvD,GAAtC,2BAA+CuD,GAA/C,IAAgErD,OAAQV,KACzDqB,MAAK,SAAA8C,GAAC,OAAInB,OACVxB,OAAM,SAAAC,GAAG,OAAIkB,EAAgBlB,UALhD,CAUA,IAAIG,EAAa,CACfpB,GAAI4D,KAAKC,MAAsB,IAAhBD,KAAKE,UACpB7D,KAAMV,EACNW,OAAQV,GAGVkD,EAAsBtB,GACPP,MAAK,SAAAkD,GACJlC,EAAYD,EAASoC,OAAOD,IAC5BvB,OAEDxB,OAAM,SAAAC,GAAG,OAAI0B,EAAgB,yCA3B1CA,EAAgB,gDAiEdlD,iBAAkB2C,EAAkBJ,GACpCtC,mBAAoB0C,EAAkBH,KACxC,0CACCc,EAAekB,KAAI,SAAAhB,GAAC,OAAI,cAAC,EAAD,aAAoB9C,aAAcA,GAAkB8C,GAAtCA,EAAEjD,W,MC5F/CkE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.a00fae53.chunk.js","sourcesContent":["function ContactForm({ addContact, newName, newNumber, handleNameChange, handleNumberChange }) {\n  return (\n    <form onSubmit={addContact}>\n      <input type=\"text\" value={newName} onChange={handleNameChange} />\n      <input type=\"text\" value={newNumber} onChange={handleNumberChange} />\n      <button type=\"submit\">Add Contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;","function Contact({id, name, number, handleDelete}) {\n  return (\n    <div id={id}>\n      <h4>{name}</h4>\n      <p>{number}</p>\n      <button type=\"button\" onClick={handleDelete}>Delete</button>\n    </div>\n  );\n}\n\nexport default Contact;","function ContactFilter({handleFilter}) {\n  return (\n    <div>\n      <p>Search contacts:</p>\n      <input type=\"text\" onChange={handleFilter} />\n    </div>\n  );\n}\n\nexport default ContactFilter;","function Notification({message}) {\n  if (!message) return null;\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  );\n}\n\nexport default Notification;","import axios from 'axios';\nconst baseUrl = \"/api/contacts\";\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n              .then(res => res.data)\n              .catch(err => console.log(err));\n}\n\nconst create = (newContact) => {\n  return axios.post(baseUrl, newContact)\n              .then(res => res.data);\n}\n\nconst update = (id, newContact) => {\n  return axios.put(`${baseUrl}/${id}`, newContact)\n              .then(res => {\n                return res.data});             \n}\n\nconst drop = (id) => {\n  return axios.delete(`${baseUrl}/${id}`)\n              .then(res => res.data);            \n}\n\nexport default { getAll, create, update, drop }","import React, { useEffect, useState } from 'react';\nimport ContactForm from './ContactForm';\nimport Contact from './Contact';\nimport ContactFilter from './ContactFilter';\nimport Notification from './Notification';\nimport contactService from './Services';\n\nfunction App() {\n  const defaultName = \"enter a name\";\n  const defaultNumber = \"enter a number\";\n\n  const [contacts, setContacts] = useState([]);\n  const [filterBy, setFilterBy] = useState(\"\");\n  const [newName, setNewName] = useState(defaultName);\n  const [newNumber, setNewNumber] = useState(defaultNumber);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleInputChange = (setter) => (e) => setter(e.target.value);\n\n  const resetInputs = () => {\n    setNewName(defaultName);\n    setNewNumber(defaultNumber);\n  }\n\n  const addContact = (e) => {\n    e.preventDefault();\n    \n    if (newName === defaultName && newNumber === defaultNumber) {\n      setErrorTimeout('Please enter non-default values for contact');\n      return;\n    }\n\n    let existingContact = contacts.find(c => c.name === newName || c.number === newNumber);\n\n    if (existingContact) {\n      let confirm = window.confirm(`This name already exists in your contacts. Do you want to replace the number?`);\n      if (confirm) {\n        contactService.update(existingContact.id, { ...existingContact, number: newNumber })\n                      .then(_ => resetInputs())\n                      .catch(err => setErrorMessage(err));\n      }\n      return;\n    }\n\n    let newContact = {\n      id: Math.round(Math.random() * 100000),\n      name: newName,\n      number: newNumber\n    };\n\n    contactService.create(newContact)\n                  .then(returnedContact => {\n                    setContacts(contacts.concat(returnedContact))\n                    resetInputs();\n                  })\n                  .catch(err => setErrorTimeout(\"could not create new contact\"));\n  \n  }\n\n  const handleFilter = (e) => {\n    let input = e.target.value;\n    setFilterBy(input.trim().toLowerCase());\n  }\n\n  const handleDelete = (e) => {\n    let id = e.target.closest('div').id;\n    contactService.drop(id)\n                  .catch(err => setErrorTimeout(\"contact was already deleted from server\"));\n  }\n\n  const setErrorTimeout = (message) => {\n    setErrorMessage(message);\n    setTimeout(() => setErrorMessage(null), 3500);\n  }\n\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(initalContacts => setContacts(initalContacts))\n      .catch(err => setErrorTimeout('could not retrieve contacts from server'));\n  }, []);\n\n  const contactsToShow = contacts.filter(c => c.name.toLowerCase().includes(filterBy) || c.number.includes(filterBy));\n\n  return (\n    <div>\n      <Notification message={errorMessage}/>\n      <h1>Your contacts</h1>\n      <ContactFilter handleFilter={handleFilter} />\n      <h1>Add a New Contact:</h1>\n      <ContactForm newName={newName}\n        newNumber={newNumber}\n        addContact={addContact}\n        handleNameChange={handleInputChange(setNewName)}\n        handleNumberChange={handleInputChange(setNewNumber)} />\n      <h2>Contacts</h2>\n      {contactsToShow.map(c => <Contact key={c.id} handleDelete={handleDelete} {...c} />)}\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}